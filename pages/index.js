import getConfig from 'next/config';
import Head from 'next/head';
import styles from '../styles/pages/Home.module.scss';
import PostCard from '../src/components/PostCard/PostCard';
import { withRouter } from 'next/router';
import { useEffect, useState } from 'react';
import helpers from '../src/helpers';
import { buildHTML } from '../src/MarkdownLayer.mjs';
import matter from 'gray-matter';
import remarkBreaks from 'remark-breaks'

function Home(props) {
    const { posts, tags = [], router } = props;
    const [postList, setPostList] = useState([]);
    const [tagsList, setTagsList] = useState([]);

    useEffect(() => {
        if (!router.isReady) return;
        const { tags: tagsQuery } = router.query;

        let updateList = [];
        if (tagsQuery) {
            const tagsArr = tagsQuery.split(',');
            setTagsList(tagsArr);
            updateList = posts.filter(({tags}) => tagsArr.some(t => tags.includes(t)))
        }

        setPostList(() => updateList.length === 0 ? posts : updateList);
    }, [router, posts]);

    const updateQuery = (tag) => {
        const newQuery = `/?tags=${[...tagsList,tag].join(',')}`;
        router.push(newQuery, newQuery, {
            shallow: true
        })
    }

    const removeFromQuery = (tag) => {
        const copyTagList = JSON.parse(JSON.stringify(tagsList));
        copyTagList.splice(copyTagList.indexOf(tag),1);
        
        const newRoute = copyTagList.length === 0 ? '/' : `/?tags=${copyTagList.join(',')}`;
        router.push(newRoute, newRoute, {
            shallow: true
        });

        setTagsList(copyTagList);
    }

    return (
        <>
            <Head>
                <title>Jake Bukuts Blog</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className={styles['home__tag-container']}>
                <h2>Filter by tags</h2>
                <div>
                    {tags.map((tag,i) => {
                        const isActive = tagsList.includes(tag);
                        const background = helpers.hashAColor(tag);
                        const color = helpers.getAccentColor(background);
                        const tagProps = [
                            {onClick: () => updateQuery(tag)},
                            {className: styles['home__tag-button__active'], onClick: () => removeFromQuery(tag)}
                        ];

                        return <button 
                            {...tagProps[+isActive]}
                            style={{ background, color }} 
                            key={i}>
                                <small>{tag}</small>
                        </button>
                    })}
                </div>
            </div>

            {postList.map((post, i) => (
                <PostCard key={i} {...post}/>
            ))}
        </>
    )
}

export default withRouter(Home);

export async function getStaticProps() {
    const { serverRuntimeConfig } = getConfig();
    const { mdLayer } = serverRuntimeConfig;
    const allGists = await Promise.all(JSON.parse(JSON.stringify(mdLayer.allGistData)).map(async (post) => {
        const { download_url } = post;
        
        const rawText = await fetch(download_url).then(r => r.text());
        const data = matter(rawText, { excerpt: true, excerpt_separator: '<!--- end preview -->' });
        const { data: frontmatter, excerpt } = data;

        return {
            ...post,
            excerpt: await buildHTML(excerpt, [remarkBreaks]),
            ...frontmatter
        }
    }));

    const tags = [...new Set(allGists.reduce((acc, {tags}) => [...acc, ...tags] , []))].sort();

    return {
        props: { 
            posts: allGists,
            tags
        }
    }
}